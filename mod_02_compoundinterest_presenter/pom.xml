<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		           http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Maven version of the xml document.
    Currently only 4.0.0 is valid -->
    <modelVersion>4.0.0</modelVersion>

    <!-- Maven projects are identified by their GAV. The groupId (G) is first, 
    the artifactId (A) is second, and the version (V) is third. The groupId is 
    usually a company's domain name reversed. -->
    <groupId>com.eclipse</groupId>

    <!-- This is the name given to the packaged build -->
    <artifactId>Mod_02_CompoundInterest_presenter</artifactId>

    <!-- The version of the build. Any value is valid though a number and a
    string are common. SNAPSHOT means a project under development. FINAL or no
    text is commonly used to refer to a stable production version -->
    <version>0.1-SNAPSHOT</version>

    <!-- Values can be:
    jar - java archive
    war - web archive
    ear - enterprise archive -->
    <packaging>jar</packaging>
    
    <!-- A description of the program -->
    <description>This code calculates compound interest and unit tests the calculations.</description>

    <!-- properties are values that plugins can use by refering to the tag name. -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>21</maven.compiler.release>
    </properties>

    <!-- Here we list the libraries that must be downloaded and added to your 
    project to be able to use them in your program -->
    <dependencies>
        <!-- JUnit 5 dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.0</version>
            <!-- This library is only used when performing unit tests. -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit-pioneer</groupId>
            <artifactId>junit-pioneer</artifactId>
            <version>2.1.0</version>
        </dependency>    
    </dependencies> 

    <build>
        <!-- Maven must be told what you expect it to do and these are called goals. 
        'clean' deletes the target folder forcing all code to be compiled. 
        'compile' goes through the source code tree and compiles every source 
                    code file and writes the bytecode to the target folder.
        'test' runs all unit tests that are in the project 
        'package' combines all the files into a jar package.
        'exec:java' will execute your program in the same JVM that Maven is running in.
        'exec:exec" will execute your program is a new JVM. -->
        <defaultGoal>clean compile test</defaultGoal>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
        </plugins>
        
    </build>
</project>
